<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Facepunch.Steamworks</name>
    </assembly>
    <members>
        <member name="M:Steamworks.AuthTicket.Cancel">
            <summary>
            Cancels a ticket. 
            You should cancel your ticket when you close the game or leave a server.
            </summary>
        </member>
        <member name="F:Steamworks.Data.LeaderboardDisplay.Numeric">
            <summary>
            The score is just a simple numerical value
            </summary>
        </member>
        <member name="F:Steamworks.Data.LeaderboardDisplay.TimeSeconds">
            <summary>
            The score represents a time, in seconds
            </summary>
        </member>
        <member name="F:Steamworks.Data.LeaderboardDisplay.TimeMilliSeconds">
            <summary>
            The score represents a time, in milliseconds
            </summary>
        </member>
        <member name="F:Steamworks.Data.LeaderboardSort.Ascending">
            <summary>
            The top-score is the lowest number
            </summary>
        </member>
        <member name="F:Steamworks.Data.LeaderboardSort.Descending">
            <summary>
            The top-score is the highest number
            </summary>
        </member>
        <member name="P:Steamworks.Data.Achievement.State">
            <summary>
            True if unlocked
            </summary>
        </member>
        <member name="P:Steamworks.Data.Achievement.UnlockTime">
            <summary>
            Should hold the unlock time if State is true
            </summary>
        </member>
        <member name="M:Steamworks.Data.Achievement.GetIcon">
            <summary>
            Gets the icon of the achievement. This can return a null image even though the image exists if the image
            hasn't been downloaded by Steam yet. You can use GetIconAsync if you want to wait for the image to be downloaded.
            </summary>
        </member>
        <member name="M:Steamworks.Data.Achievement.GetIconAsync(System.Int32)">
            <summary>
            Gets the icon of the achievement, waits for it to load if we have to
            </summary>
        </member>
        <member name="P:Steamworks.Data.Achievement.GlobalUnlocked">
            <summary>
            Returns the fraction (0-1) of users who have unlocked the specified achievement, or -1 if no data available.
            </summary>
        </member>
        <member name="M:Steamworks.Data.Achievement.Trigger(System.Boolean)">
            <summary>
            Make this achievement earned
            </summary>
        </member>
        <member name="M:Steamworks.Data.Achievement.Clear">
            <summary>
            Reset this achievement to not achieved
            </summary>
        </member>
        <member name="P:Steamworks.Data.Leaderboard.Name">
            <summary>
            the name of a leaderboard
            </summary>
        </member>
        <member name="M:Steamworks.Data.Leaderboard.ReplaceScore(System.Int32,System.Int32[])">
            <summary>
            Submit your score and replace your old score even if it was better
            </summary>
        </member>
        <member name="M:Steamworks.Data.Leaderboard.SubmitScore(System.Int32,System.Int32[])">
            <summary>
            Submit your new score, but won't replace your high score if it's lower
            </summary>
        </member>
        <member name="M:Steamworks.Data.Leaderboard.AttachUgc(Steamworks.Data.Ugc)">
            <summary>
            Attaches a piece of user generated content the user's entry on a leaderboard
            </summary>
        </member>
        <member name="M:Steamworks.Data.Leaderboard.GetScoresAsync(System.Int32,System.Int32)">
            <summary>
            Used to query for a sequential range of leaderboard entries by leaderboard Sort.
            </summary>
        </member>
        <member name="M:Steamworks.Data.Leaderboard.GetScoresAroundUserAsync(System.Int32,System.Int32)">
            <summary>
            Used to retrieve leaderboard entries relative a user's entry. If there are not enough entries in the leaderboard 
            before or after the user's entry, Steam will adjust the range to try to return the number of entries requested.
            For example, if the user is #1 on the leaderboard and start is set to -2, end is set to 2, Steam will return the first 
            5 entries in the leaderboard. If The current user has no entry, this will return null.
            </summary>
        </member>
        <member name="M:Steamworks.Data.Leaderboard.GetScoresFromFriends">
            <summary>
            Used to retrieve all leaderboard entries for friends of the current user
            </summary>
        </member>
        <member name="T:Steamworks.Data.OutgoingPacket">
            <summary>
            A server query packet.
            </summary>
        </member>
        <member name="P:Steamworks.Data.OutgoingPacket.Address">
            <summary>
            Target IP address
            </summary>
        </member>
        <member name="P:Steamworks.Data.OutgoingPacket.Port">
            <summary>
            Target port
            </summary>
        </member>
        <member name="P:Steamworks.Data.OutgoingPacket.Data">
            <summary>
            This data is pooled. Make a copy if you don't use it immediately.
            This buffer is also quite large - so pay attention to Size.
            </summary>
        </member>
        <member name="P:Steamworks.Data.OutgoingPacket.Size">
            <summary>
            Size of the data
            </summary>
        </member>
        <member name="M:Steamworks.Data.Screenshot.TagUser(Steamworks.SteamId)">
            <summary>
            Tags a user as being visible in the screenshot
            </summary>
        </member>
        <member name="M:Steamworks.Data.Screenshot.SetLocation(System.String)">
            <summary>
            Tags a user as being visible in the screenshot
            </summary>
        </member>
        <member name="M:Steamworks.Data.Screenshot.TagPublishedFile(Steamworks.Data.PublishedFileId)">
            <summary>
            Tags a user as being visible in the screenshot
            </summary>
        </member>
        <member name="M:Steamworks.Data.ServerInfo.AddToHistory">
            <summary>
            Add this server to our history list
            If we're already in the history list, weill set the last played time to now
            </summary>
        </member>
        <member name="M:Steamworks.Data.ServerInfo.RemoveFromHistory">
            <summary>
            Remove this server from our history list
            </summary>
        </member>
        <member name="M:Steamworks.Data.ServerInfo.AddToFavourites">
            <summary>
            Add this server to our favourite list
            </summary>
        </member>
        <member name="M:Steamworks.Data.ServerInfo.RemoveFromFavourites">
            <summary>
            Remove this server from our favourite list
            </summary>
        </member>
        <member name="P:Steamworks.ServerList.Base.AppId">
            <summary>
            Which app we're querying. Defaults to the current app.
            </summary>
        </member>
        <member name="E:Steamworks.ServerList.Base.OnChanges">
            <summary>
            When a new server is added, this function will get called
            </summary>
        </member>
        <member name="E:Steamworks.ServerList.Base.OnResponsiveServer">
            <summary>
            Called for every responsive server
            </summary>
        </member>
        <member name="F:Steamworks.ServerList.Base.Responsive">
            <summary>
            A list of servers that responded. If you're only interested in servers that responded since you
            last updated, then simply clear this list.
            </summary>
        </member>
        <member name="F:Steamworks.ServerList.Base.Unresponsive">
            <summary>
            A list of servers that were in the master list but didn't respond. 
            </summary>
        </member>
        <member name="M:Steamworks.ServerList.Base.RunQueryAsync(System.Single)">
            <summary>
            Query the server list. Task result will be true when finished
            </summary>
            <returns></returns>
        </member>
        <member name="T:Steamworks.SteamApps">
            <summary>
            Exposes a wide range of information and actions for applications and Downloadable Content (DLC).
            </summary>
        </member>
        <member name="E:Steamworks.SteamApps.OnDlcInstalled">
            <summary>
            posted after the user gains ownership of DLC and that DLC is installed
            </summary>
        </member>
        <member name="E:Steamworks.SteamApps.OnNewLaunchParameters">
            <summary>
            posted after the user gains executes a Steam URL with command line or query parameters
            such as steam://run/appid//-commandline/?param1=value1(and)param2=value2(and)param3=value3 etc
            while the game is already running.  The new params can be queried
            with GetLaunchQueryParam and GetLaunchCommandLine
            </summary>
        </member>
        <member name="P:Steamworks.SteamApps.IsSubscribed">
            <summary>
            Checks if the active user is subscribed to the current App ID
            </summary>
        </member>
        <member name="P:Steamworks.SteamApps.IsSubscribedFromFamilySharing">
            <summary>
            Check if user borrowed this game via Family Sharing, If true, call GetAppOwner() to get the lender SteamID
            </summary>
        </member>
        <member name="P:Steamworks.SteamApps.IsLowVoilence">
            <summary>
            Checks if the license owned by the user provides low violence depots.
            Low violence depots are useful for copies sold in countries that have content restrictions
            </summary>
        </member>
        <member name="P:Steamworks.SteamApps.IsCybercafe">
            <summary>
            Checks whether the current App ID license is for Cyber Cafes.
            </summary>
        </member>
        <member name="P:Steamworks.SteamApps.IsVACBanned">
            <summary>
            CChecks if the user has a VAC ban on their account
            </summary>
        </member>
        <member name="P:Steamworks.SteamApps.GameLanguage">
            <summary>
            Gets the current language that the user has set.
            This falls back to the Steam UI language if the user hasn't explicitly picked a language for the title.
            </summary>
        </member>
        <member name="P:Steamworks.SteamApps.AvailablLanguages">
            <summary>
            Gets a list of the languages the current app supports.
            </summary>
        </member>
        <member name="M:Steamworks.SteamApps.IsSubscribedToApp(Steamworks.AppId)">
            <summary>
            Checks if the active user is subscribed to a specified AppId.
            Only use this if you need to check ownership of another game related to yours, a demo for example.
            </summary>
        </member>
        <member name="M:Steamworks.SteamApps.IsDlcInstalled(Steamworks.AppId)">
            <summary>
            Checks if the user owns a specific DLC and if the DLC is installed
            </summary>
        </member>
        <member name="M:Steamworks.SteamApps.PurchaseTime(Steamworks.AppId)">
            <summary>
            Returns the time of the purchase of the app
            </summary>
        </member>
        <member name="P:Steamworks.SteamApps.IsSubscribedFromFreeWeekend">
            <summary>
            Checks if the user is subscribed to the current app through a free weekend
            This function will return false for users who have a retail or other type of license
            Before using, please ask your Valve technical contact how to package and secure your free weekened
            </summary>
        </member>
        <member name="M:Steamworks.SteamApps.DlcInformation">
            <summary>
            Returns metadata for all available DLC
            </summary>
        </member>
        <member name="M:Steamworks.SteamApps.InstallDlc(Steamworks.AppId)">
            <summary>
            Install/Uninstall control for optional DLC
            </summary>
        </member>
        <member name="M:Steamworks.SteamApps.UninstallDlc(Steamworks.AppId)">
            <summary>
            Install/Uninstall control for optional DLC
            </summary>
        </member>
        <member name="P:Steamworks.SteamApps.CurrentBetaName">
            <summary>
            Returns null if we're not on a beta branch, else the name of the branch
            </summary>
        </member>
        <member name="M:Steamworks.SteamApps.MarkContentCorrupt(System.Boolean)">
             <summary>
             Allows you to force verify game content on next launch.
            
             If you detect the game is out-of-date(for example, by having the client detect a version mismatch with a server),
             you can call use MarkContentCorrupt to force a verify, show a message to the user, and then quit.
             </summary>
        </member>
        <member name="M:Steamworks.SteamApps.InstalledDepots(Steamworks.AppId)">
            <summary>
            Gets a list of all installed depots for a given App ID in mount order
            </summary>
        </member>
        <member name="M:Steamworks.SteamApps.AppInstallDir(Steamworks.AppId)">
            <summary>
            Gets the install folder for a specific AppID.
            This works even if the application is not installed, based on where the game would be installed with the default Steam library location.
            </summary>
        </member>
        <member name="M:Steamworks.SteamApps.IsAppInstalled(Steamworks.AppId)">
            <summary>
            The app may not actually be owned by the current user, they may have it left over from a free weekend, etc.
            </summary>
        </member>
        <member name="P:Steamworks.SteamApps.AppOwner">
            <summary>
            Gets the Steam ID of the original owner of the current app. If it's different from the current user then it is borrowed..
            </summary>
        </member>
        <member name="M:Steamworks.SteamApps.GetLaunchParam(System.String)">
            <summary>
            Gets the associated launch parameter if the game is run via steam://run/appid/?param1=value1;param2=value2;param3=value3 etc.
            Parameter names starting with the character '@' are reserved for internal use and will always return an empty string.
            Parameter names starting with an underscore '_' are reserved for steam features -- they can be queried by the game, 
            but it is advised that you not param names beginning with an underscore for your own features.
            </summary>
        </member>
        <member name="M:Steamworks.SteamApps.DlcDownloadProgress(Steamworks.AppId)">
            <summary>
            Gets the download progress for optional DLC.
            </summary>
        </member>
        <member name="P:Steamworks.SteamApps.BuildId">
            <summary>
            Gets the buildid of this app, may change at any time based on backend updates to the game.
            Defaults to 0 if you're not running a build downloaded from steam.
            </summary>
        </member>
        <member name="M:Steamworks.SteamApps.GetFileDetailsAsync(System.String)">
            <summary>
            Asynchronously retrieves metadata details about a specific file in the depot manifest.
            Currently provides:
            </summary>
        </member>
        <member name="P:Steamworks.SteamApps.CommandLine">
            <summary>
            Get command line if game was launched via Steam URL, e.g. steam://run/appid//command line/.
            This method of passing a connect string (used when joining via rich presence, accepting an
            invite, etc) is preferable to passing the connect string on the operating system command
            line, which is a security risk.  In order for rich presence joins to go through this
            path and not be placed on the OS command line, you must set a value in your app's
            configuration on Steam.  Ask Valve for help with this.
            </summary>
        </member>
        <member name="P:Steamworks.SteamClient.IsLoggedOn">
            <summary>
            Checks if the current user's Steam client is connected to the Steam servers.
            If it's not then no real-time services provided by the Steamworks API will be enabled. The Steam 
            client will automatically be trying to recreate the connection as often as possible. When the 
            connection is restored a SteamServersConnected_t callback will be posted.
            You usually don't need to check for this yourself. All of the API calls that rely on this will 
            check internally. Forcefully disabling stuff when the player loses access is usually not a 
            very good experience for the player and you could be preventing them from accessing APIs that do not 
            need a live connection to Steam.
            </summary>
        </member>
        <member name="P:Steamworks.SteamClient.SteamId">
            <summary>
            Gets the Steam ID of the account currently logged into the Steam client. This is 
            commonly called the 'current user', or 'local user'.
            A Steam ID is a unique identifier for a Steam accounts, Steam groups, Lobbies and Chat 
            rooms, and used to differentiate users in all parts of the Steamworks API.
            </summary>
        </member>
        <member name="P:Steamworks.SteamClient.Name">
            <summary>
            returns the local players name - guaranteed to not be NULL.
            this is the same name as on the users community profile page
            </summary>
        </member>
        <member name="P:Steamworks.SteamClient.State">
            <summary>
            gets the status of the current user
            </summary>
        </member>
        <member name="P:Steamworks.SteamClient.AppId">
            <summary>
            returns the appID of the current process
            </summary>
        </member>
        <member name="T:Steamworks.SteamFriends">
            <summary>
            Undocumented Parental Settings
            </summary>
        </member>
        <member name="E:Steamworks.SteamFriends.OnChatMessage">
            <summary>
            Called when chat message has been received from a friend. You'll need to turn on
            ListenForFriendsMessages to recieve this. (friend, msgtype, message)
            </summary>
        </member>
        <member name="E:Steamworks.SteamFriends.OnPersonaStateChange">
            <summary>
            called when a friends' status changes
            </summary>
        </member>
        <member name="E:Steamworks.SteamFriends.OnGameRichPresenceJoinRequested">
            <summary>
            Called when the user tries to join a game from their friends list
            rich presence will have been set with the "connect" key which is set here
            </summary>
        </member>
        <member name="E:Steamworks.SteamFriends.OnGameOverlayActivated">
            <summary>
            Posted when game overlay activates or deactivates
            the game can use this to be pause or resume single player games
            </summary>
        </member>
        <member name="E:Steamworks.SteamFriends.OnGameServerChangeRequested">
            <summary>
            Called when the user tries to join a different game server from their friends list
            game client should attempt to connect to specified server when this is received
            </summary>
        </member>
        <member name="E:Steamworks.SteamFriends.OnGameLobbyJoinRequested">
            <summary>
            Called when the user tries to join a lobby from their friends list
            game client should attempt to connect to specified lobby when this is received
            </summary>
        </member>
        <member name="E:Steamworks.SteamFriends.OnFriendRichPresenceUpdate">
            <summary>
            Callback indicating updated data about friends rich presence information
            </summary>
        </member>
        <member name="M:Steamworks.SteamFriends.OpenOverlay(System.String)">
            <summary>
            The dialog to open. Valid options are: 
            "friends", 
            "community", 
            "players", 
            "settings", 
            "officialgamegroup", 
            "stats", 
            "achievements".
            </summary>
        </member>
        <member name="M:Steamworks.SteamFriends.OpenUserOverlay(Steamworks.SteamId,System.String)">
            <summary>
            "steamid" - Opens the overlay web browser to the specified user or groups profile.
            "chat" - Opens a chat window to the specified user, or joins the group chat.
            "jointrade" - Opens a window to a Steam Trading session that was started with the ISteamEconomy/StartTrade Web API.
            "stats" - Opens the overlay web browser to the specified user's stats.
            "achievements" - Opens the overlay web browser to the specified user's achievements.
            "friendadd" - Opens the overlay in minimal mode prompting the user to add the target user as a friend.
            "friendremove" - Opens the overlay in minimal mode prompting the user to remove the target friend.
            "friendrequestaccept" - Opens the overlay in minimal mode prompting the user to accept an incoming friend invite.
            "friendrequestignore" - Opens the overlay in minimal mode prompting the user to ignore an incoming friend invite.
            </summary>
        </member>
        <member name="M:Steamworks.SteamFriends.OpenStoreOverlay(Steamworks.AppId)">
            <summary>
            Activates the Steam Overlay to the Steam store page for the provided app.
            </summary>
        </member>
        <member name="M:Steamworks.SteamFriends.OpenWebOverlay(System.String,System.Boolean)">
            <summary>
            Activates Steam Overlay web browser directly to the specified URL.
            </summary>
        </member>
        <member name="M:Steamworks.SteamFriends.OpenGameInviteOverlay(Steamworks.SteamId)">
            <summary>
            Activates the Steam Overlay to open the invite dialog. Invitations sent from this dialog will be for the provided lobby.
            </summary>
        </member>
        <member name="M:Steamworks.SteamFriends.SetPlayedWith(Steamworks.SteamId)">
            <summary>
            Mark a target user as 'played with'.
            NOTE: The current user must be in game with the other player for the association to work.
            </summary>
        </member>
        <member name="M:Steamworks.SteamFriends.GetRichPresence(System.String)">
            <summary>
            Find a rich presence value by key for current user. Will be null if not found.
            </summary>
        </member>
        <member name="M:Steamworks.SteamFriends.SetRichPresence(System.String,System.String)">
            <summary>
            Sets a rich presence value by key for current user.
            </summary>
        </member>
        <member name="M:Steamworks.SteamFriends.ClearRichPresence">
            <summary>
            Clears all of the current user's rich presence data.
            </summary>
        </member>
        <member name="P:Steamworks.SteamFriends.ListenForFriendsMessages">
            <summary>
            Listens for Steam friends chat messages.
            You can then show these chats inline in the game. For example with a Blizzard style chat message system or the chat system in Dota 2.
            After enabling this you will receive callbacks when ever the user receives a chat message.
            </summary>
        </member>
        <member name="T:Steamworks.SteamInventory">
            <summary>
            Undocumented Parental Settings
            </summary>
        </member>
        <member name="M:Steamworks.SteamInventory.LoadItemDefinitions">
            <summary>
            Call this if you're going to want to access definition information. You should be able to get 
            away with calling this once at the start if your game, assuming your items don't change all the time.
            This will trigger OnDefinitionsUpdated at which point Definitions should be set.
            </summary>
        </member>
        <member name="M:Steamworks.SteamInventory.WaitForDefinitions(System.Single)">
            <summary>
            Will call LoadItemDefinitions and wait until Definitions is not null
            </summary>
        </member>
        <member name="M:Steamworks.SteamInventory.GenerateItem(Steamworks.InventoryDef,System.Int32)">
            <summary>
            This is used to grant a specific item to the user. This should 
            only be used for development prototyping, from a trusted server, 
            or if you don't care about hacked clients granting arbitrary items. 
            This call can be disabled by a setting on Steamworks.
            </summary>
        </member>
        <member name="M:Steamworks.SteamInventory.CraftItem(Steamworks.InventoryItem[],Steamworks.InventoryDef)">
            <summary>
            Crafting! Uses the passed items to buy the target item.
            You need to have set up the appropriate exchange rules in your item
            definitions. This assumes all the items passed in aren't stacked.
            </summary>
        </member>
        <member name="M:Steamworks.SteamInventory.DeserializeAsync(System.Byte[],System.Int32)">
            <summary>
            Deserializes a result set and verifies the signature bytes.	
            This call has a potential soft-failure mode where the Result is expired, it will 
            still succeed in this mode.The "expired" 
            result could indicate that the data may be out of date - not just due to timed 
            expiration( one hour ), but also because one of the items in the result set may 
            have been traded or consumed since the result set was generated.You could compare 
            the timestamp from GetResultTimestamp to ISteamUtils::GetServerRealTime to determine
            how old the data is. You could simply ignore the "expired" result code and 
            continue as normal, or you could request the player with expired data to send 
            an updated result set.
            You should call CheckResultSteamID on the result handle when it completes to verify 
            that a remote player is not pretending to have a different user's inventory.
            </summary>
        </member>
        <member name="T:Steamworks.SteamMusic">
            <summary>
            Undocumented Parental Settings
            </summary>
        </member>
        <member name="E:Steamworks.SteamMusic.OnPlaybackChanged">
            <summary>
            Playback status changed
            </summary>
        </member>
        <member name="E:Steamworks.SteamMusic.OnVolumeChanged">
            <summary>
            Volume changed, parameter is new volume
            </summary>
        </member>
        <member name="P:Steamworks.SteamMusic.IsEnabled">
            <summary>
            Checks if Steam Music is enabled
            </summary>
        </member>
        <member name="P:Steamworks.SteamMusic.IsPlaying">
            <summary>
            true if a song is currently playing, paused, or queued up to play; otherwise false.
            </summary>
        </member>
        <member name="P:Steamworks.SteamMusic.Status">
            <summary>
            Gets the current status of the Steam Music player
            </summary>
        </member>
        <member name="M:Steamworks.SteamMusic.PlayPrevious">
            <summary>
            Have the Steam Music player play the previous song.
            </summary>
        </member>
        <member name="M:Steamworks.SteamMusic.PlayNext">
            <summary>
            Have the Steam Music player skip to the next song
            </summary>
        </member>
        <member name="P:Steamworks.SteamMusic.Volume">
            <summary>
            Gets/Sets the current volume of the Steam Music player
            </summary>
        </member>
        <member name="F:Steamworks.SteamNetworking.OnP2PSessionRequest">
            <summary>
            This SteamId wants to send you a message. You should respond by calling AcceptP2PSessionWithUser
            if you want to recieve their messages
            </summary>
        </member>
        <member name="F:Steamworks.SteamNetworking.OnP2PConnectionFailed">
            <summary>
            Called when packets can't get through to the specified user.
            All queued packets unsent at this point will be dropped, further attempts
            to send will retry making the connection (but will be dropped if we fail again).
            </summary>
        </member>
        <member name="M:Steamworks.SteamNetworking.AcceptP2PSessionWithUser(Steamworks.SteamId)">
            <summary>
            This should be called in response to a OnP2PSessionRequest
            </summary>
        </member>
        <member name="M:Steamworks.SteamNetworking.CloseP2PSessionWithUser(Steamworks.SteamId)">
            <summary>
            This should be called when you're done communicating with a user, as this will
            free up all of the resources allocated for the connection under-the-hood.
            If the remote user tries to send data to you again, a new OnP2PSessionRequest 
            callback will be posted
            </summary>
        </member>
        <member name="M:Steamworks.SteamNetworking.IsP2PPacketAvailable(System.Int32)">
            <summary>
            Checks if a P2P packet is available to read, and gets the size of the message if there is one.
            </summary>
        </member>
        <member name="M:Steamworks.SteamNetworking.ReadP2PPacket(System.Int32)">
            <summary>
            Reads in a packet that has been sent from another user via SendP2PPacket..
            </summary>
        </member>
        <member name="M:Steamworks.SteamNetworking.SendP2PPacket(Steamworks.SteamId,System.Byte[],System.Int32,System.Int32,Steamworks.P2PSend)">
            <summary>
            Sends a P2P packet to the specified user.
            This is a session-less API which automatically establishes NAT-traversing or Steam relay server connections.
            NOTE: The first packet send may be delayed as the NAT-traversal code runs.
            </summary>
        </member>
        <member name="T:Steamworks.SteamParental">
            <summary>
            Undocumented Parental Settings
            </summary>
        </member>
        <member name="E:Steamworks.SteamParental.OnSettingsChanged">
            <summary>
            Parental Settings Changed
            </summary>
        </member>
        <member name="P:Steamworks.SteamParental.IsParentalLockEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:Steamworks.SteamParental.IsParentalLockLocked">
            <summary>
            
            </summary>
        </member>
        <member name="M:Steamworks.SteamParental.IsAppBlocked(Steamworks.AppId)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Steamworks.SteamParental.BIsAppInBlockList(Steamworks.AppId)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Steamworks.SteamParental.IsFeatureBlocked(Steamworks.ParentalFeature)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Steamworks.SteamParental.BIsFeatureInBlockList(Steamworks.ParentalFeature)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Steamworks.SteamRemoteStorage">
            <summary>
            Undocumented Parental Settings
            </summary>
        </member>
        <member name="M:Steamworks.SteamRemoteStorage.FileWrite(System.String,System.Byte[])">
            <summary>
            Creates a new file, writes the bytes to the file, and then closes the file.
            If the target file already exists, it is overwritten
            </summary>
        </member>
        <member name="M:Steamworks.SteamRemoteStorage.FileRead(System.String)">
            <summary>
            Opens a binary file, reads the contents of the file into a byte array, and then closes the file.
            </summary>
        </member>
        <member name="M:Steamworks.SteamRemoteStorage.FileExists(System.String)">
            <summary>
            Checks whether the specified file exists.
            </summary>
        </member>
        <member name="M:Steamworks.SteamRemoteStorage.FilePersisted(System.String)">
            <summary>
            Checks if a specific file is persisted in the steam cloud.
            </summary>
        </member>
        <member name="M:Steamworks.SteamRemoteStorage.FileTime(System.String)">
            <summary>
            Gets the specified file's last modified date/time.
            </summary>
        </member>
        <member name="M:Steamworks.SteamRemoteStorage.FileSize(System.String)">
            <summary>
            Gets the specified files size in bytes. 0 if not exists.
            </summary>
        </member>
        <member name="M:Steamworks.SteamRemoteStorage.FileForget(System.String)">
            <summary>
            Deletes the file from remote storage, but leaves it on the local disk and remains accessible from the API.
            </summary>
        </member>
        <member name="M:Steamworks.SteamRemoteStorage.FileDelete(System.String)">
            <summary>
            Deletes a file from the local disk, and propagates that delete to the cloud.
            </summary>
        </member>
        <member name="P:Steamworks.SteamRemoteStorage.QuotaBytes">
            <summary>
            Number of bytes total
            </summary>
        </member>
        <member name="P:Steamworks.SteamRemoteStorage.QuotaUsedBytes">
            <summary>
            Number of bytes used
            </summary>
        </member>
        <member name="P:Steamworks.SteamRemoteStorage.QuotaRemainingBytes">
            <summary>
            Number of bytes remaining until your quota is used
            </summary>
        </member>
        <member name="P:Steamworks.SteamRemoteStorage.IsCloudEnabled">
            <summary>
            returns true if IsCloudEnabledForAccount AND IsCloudEnabledForApp
            </summary>
        </member>
        <member name="P:Steamworks.SteamRemoteStorage.IsCloudEnabledForAccount">
            <summary>
            Checks if the account wide Steam Cloud setting is enabled for this user
            or if they disabled it in the Settings->Cloud dialog.
            </summary>
        </member>
        <member name="P:Steamworks.SteamRemoteStorage.IsCloudEnabledForApp">
            <summary>
            Checks if the per game Steam Cloud setting is enabled for this user
            or if they disabled it in the Game Properties->Update dialog.
            
            This must only ever be set as the direct result of the user explicitly 
            requesting that it's enabled or not. This is typically accomplished with 
            a checkbox within your in-game options
            </summary>
        </member>
        <member name="P:Steamworks.SteamRemoteStorage.FileCount">
            <summary>
            Gets the total number of local files synchronized by Steam Cloud.
            </summary>
        </member>
        <member name="P:Steamworks.SteamRemoteStorage.Files">
            <summary>
            Get a list of filenames synchronized by Steam Cloud
            </summary>
        </member>
        <member name="T:Steamworks.SteamScreenshots">
            <summary>
            Undocumented Parental Settings
            </summary>
        </member>
        <member name="E:Steamworks.SteamScreenshots.OnScreenshotRequested">
            <summary>
            A screenshot has been requested by the user from the Steam screenshot hotkey. 
            This will only be called if HookScreenshots has been enabled, in which case Steam 
            will not take the screenshot itself.
            </summary>
        </member>
        <member name="E:Steamworks.SteamScreenshots.OnScreenshotReady">
            <summary>
            A screenshot successfully written or otherwise added to the library and can now be tagged.
            </summary>
        </member>
        <member name="E:Steamworks.SteamScreenshots.OnScreenshotFailed">
            <summary>
            A screenshot attempt failed
            </summary>
        </member>
        <member name="M:Steamworks.SteamScreenshots.WriteScreenshot(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a screenshot to the user's screenshot library given the raw image data, which must be in RGB format.
            The return value is a handle that is valid for the duration of the game process and can be used to apply tags.
            </summary>
        </member>
        <member name="M:Steamworks.SteamScreenshots.AddScreenshot(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Adds a screenshot to the user's screenshot library from disk.  If a thumbnail is provided, it must be 200 pixels wide and the same aspect ratio
            as the screenshot, otherwise a thumbnail will be generated if the user uploads the screenshot.  The screenshots must be in either JPEG or TGA format.
            The return value is a handle that is valid for the duration of the game process and can be used to apply tags.
            JPEG, TGA, and PNG formats are supported.
            </summary>
        </member>
        <member name="M:Steamworks.SteamScreenshots.TriggerScreenshot">
            <summary>
            Causes the Steam overlay to take a screenshot.  
            If screenshots are being hooked by the game then a 
            ScreenshotRequested callback is sent back to the game instead. 
            </summary>
        </member>
        <member name="P:Steamworks.SteamScreenshots.Hooked">
            <summary>
            Toggles whether the overlay handles screenshots when the user presses the screenshot hotkey, or if the game handles them.
            Hooking is disabled by default, and only ever enabled if you do so with this function.
            If the hooking is enabled, then the ScreenshotRequested_t callback will be sent if the user presses the hotkey or 
            when TriggerScreenshot is called, and then the game is expected to call WriteScreenshot or AddScreenshotToLibrary in response.
            </summary>
        </member>
        <member name="T:Steamworks.SteamServer">
            <summary>
            Provides the core of the Steam Game Servers API
            </summary>
        </member>
        <member name="E:Steamworks.SteamServer.OnValidateAuthTicketResponse">
            <summary>
            User has been authed or rejected
            </summary>
        </member>
        <member name="P:Steamworks.SteamServer.DedicatedServer">
            <summary>
            Sets whether this should be marked as a dedicated server.
            If not, it is assumed to be a listen server.
            </summary>
        </member>
        <member name="P:Steamworks.SteamServer.MaxPlayers">
            <summary>
            Gets or sets the current MaxPlayers. 
            This doesn't enforce any kind of limit, it just updates the master server.
            </summary>
        </member>
        <member name="P:Steamworks.SteamServer.BotCount">
            <summary>
            Gets or sets the current BotCount. 
            This doesn't enforce any kind of limit, it just updates the master server.
            </summary>
        </member>
        <member name="P:Steamworks.SteamServer.MapName">
            <summary>
            Gets or sets the current Map Name. 
            </summary>
        </member>
        <member name="P:Steamworks.SteamServer.ModDir">
            <summary>
            Gets or sets the current ModDir
            </summary>
        </member>
        <member name="P:Steamworks.SteamServer.Product">
            <summary>
            Gets the current product
            </summary>
        </member>
        <member name="P:Steamworks.SteamServer.GameDescription">
            <summary>
            Gets or sets the current Product
            </summary>
        </member>
        <member name="P:Steamworks.SteamServer.ServerName">
            <summary>
            Gets or sets the current ServerName
            </summary>
        </member>
        <member name="P:Steamworks.SteamServer.Passworded">
            <summary>
            Set whether the server should report itself as passworded
            </summary>
        </member>
        <member name="P:Steamworks.SteamServer.GameTags">
            <summary>
            Gets or sets the current GameTags. This is a comma seperated list of tags for this server.
            When querying the server list you can filter by these tags.
            </summary>
        </member>
        <member name="M:Steamworks.SteamServer.LogOnAnonymous">
            <summary>
            Log onto Steam anonymously.
            </summary>
        </member>
        <member name="P:Steamworks.SteamServer.LoggedOn">
            <summary>
            Returns true if the server is connected and registered with the Steam master server
            You should have called LogOnAnonymous etc on startup.
            </summary>
        </member>
        <member name="P:Steamworks.SteamServer.PublicIp">
            <summary>
            To the best of its ability this tries to get the server's
            current public ip address. Be aware that this is likely to return
            null for the first few seconds after initialization.
            </summary>
        </member>
        <member name="P:Steamworks.SteamServer.AutomaticHeartbeats">
            <summary>
            Enable or disable heartbeats, which are sent regularly to the master server.
            Enabled by default.
            </summary>
        </member>
        <member name="P:Steamworks.SteamServer.AutomaticHeartbeatRate">
            <summary>
            Set heartbeat interval, if automatic heartbeats are enabled.
            You can leave this at the default.
            </summary>
        </member>
        <member name="M:Steamworks.SteamServer.ForceHeartbeat">
            <summary>
            Force send a heartbeat to the master server instead of waiting
            for the next automatic update (if you've left them enabled)
            </summary>
        </member>
        <member name="M:Steamworks.SteamServer.UpdatePlayer(System.UInt64,System.String,System.Int32)">
            <summary>
            Update this connected player's information. You should really call this
            any time a player's name or score changes. This keeps the information shown
            to server queries up to date.
            </summary>
        </member>
        <member name="M:Steamworks.SteamServer.SetKey(System.String,System.String)">
            <summary>
            Sets a Key Value. These can be anything you like, and are accessible
            when querying servers from the server list.
            
            Information describing gamemodes are common here.
            </summary>
        </member>
        <member name="M:Steamworks.SteamServer.BeginAuthSession(System.Byte[],System.UInt64)">
            <summary>
            Start authorizing a ticket. This user isn't authorized yet. Wait for a call to OnAuthChange.
            </summary>
        </member>
        <member name="M:Steamworks.SteamServer.EndSession(System.UInt64)">
            <summary>
            Forget this guy. They're no longer in the game.
            </summary>
        </member>
        <member name="M:Steamworks.SteamServer.GetOutgoingPacket(Steamworks.Data.OutgoingPacket@)">
            <summary>
            If true, Steam wants to send a packet. You should respond by sending
            this packet in an unconnected way to the returned Address and Port.
            </summary>
            <param name="packet">Packet to send. The Data passed is pooled - so use it immediately.</param>
            <returns>True if we want to send a packet</returns>
        </member>
        <member name="M:Steamworks.SteamServer.HandleIncomingPacket(System.Byte[],System.Int32,System.UInt32,System.UInt16)">
            <summary>
            We have received a server query on our game port. Pass it to Steam to handle.
            </summary>
        </member>
        <member name="M:Steamworks.SteamServerInventory.LoadItemDefinitions">
            <summary>
            Call this if you're going to want to access definition information. You should be able to get 
            away with calling this once at the start if your game, assuming your items don't change all the time.
            This will trigger OnDefinitionsUpdated at which point Definitions should be set.
            </summary>
        </member>
        <member name="M:Steamworks.SteamServerInventory.WaitForDefinitions(System.Single)">
            <summary>
            Will call LoadItemDefinitions and wait until Definitions is not null
            </summary>
        </member>
        <member name="M:Steamworks.SteamServerInventory.DeserializeAsync(System.Byte[],System.Int32)">
            <summary>
            Deserializes a result set and verifies the signature bytes.	
            This call has a potential soft-failure mode where the Result is expired, it will 
            still succeed in this mode.The "expired" 
            result could indicate that the data may be out of date - not just due to timed 
            expiration( one hour ), but also because one of the items in the result set may 
            have been traded or consumed since the result set was generated.You could compare 
            the timestamp from GetResultTimestamp to ISteamUtils::GetServerRealTime to determine
            how old the data is. You could simply ignore the "expired" result code and 
            continue as normal, or you could request the player with expired data to send 
            an updated result set.
            You should call CheckResultSteamID on the result handle when it completes to verify 
            that a remote player is not pretending to have a different user's inventory.
            </summary>
        </member>
        <member name="T:Steamworks.SteamUGC">
            <summary>
            Functions for accessing and manipulating Steam user information.
            This is also where the APIs for Steam Voice are exposed.
            </summary>
        </member>
        <member name="T:Steamworks.SteamUser">
            <summary>
            Functions for accessing and manipulating Steam user information.
            This is also where the APIs for Steam Voice are exposed.
            </summary>
        </member>
        <member name="E:Steamworks.SteamUser.OnSteamServersConnected">
            <summary>
            Called when a connections to the Steam back-end has been established.
            This means the Steam client now has a working connection to the Steam servers. 
            Usually this will have occurred before the game has launched, and should only be seen if the 
            user has dropped connection due to a networking issue or a Steam server update.
            </summary>
        </member>
        <member name="E:Steamworks.SteamUser.OnSteamServerConnectFailure">
            <summary>
            Called when a connection attempt has failed.
            This will occur periodically if the Steam client is not connected, 
            and has failed when retrying to establish a connection.
            </summary>
        </member>
        <member name="E:Steamworks.SteamUser.OnSteamServersDisconnected">
            <summary>
            Called if the client has lost connection to the Steam servers.
            Real-time services will be disabled until a matching OnSteamServersConnected has been posted.
            </summary>
        </member>
        <member name="E:Steamworks.SteamUser.OnClientGameServerDeny">
            <summary>
            Sent by the Steam server to the client telling it to disconnect from the specified game server, 
            which it may be in the process of or already connected to.
            The game client should immediately disconnect upon receiving this message.
            This can usually occur if the user doesn't have rights to play on the game server.
            </summary>
        </member>
        <member name="E:Steamworks.SteamUser.OnLicensesUpdated">
            <summary>
            Called whenever the users licenses (owned packages) changes.
            </summary>
        </member>
        <member name="E:Steamworks.SteamUser.OnValidateAuthTicketResponse">
            <summary>
            Called when an auth ticket has been validated. 
            The first parameter is the steamid of this user
            The second is the Steam ID that owns the game, this will be different from the first if the game is being borrowed via Steam Family Sharing
            </summary>
        </member>
        <member name="E:Steamworks.SteamUser.OnMicroTxnAuthorizationResponse">
            <summary>
            Called when a user has responded to a microtransaction authorization request.
            ( appid, orderid, user authorized )
            </summary>
        </member>
        <member name="E:Steamworks.SteamUser.OnGameWebCallback">
            <summary>
            Sent to your game in response to a steam://gamewebcallback/ command from a user clicking a link in the Steam overlay browser.
            You can use this to add support for external site signups where you want to pop back into the browser after some web page 
            signup sequence, and optionally get back some detail about that.
            </summary>
        </member>
        <member name="P:Steamworks.SteamUser.VoiceRecord">
            <summary>
            Starts/Stops voice recording.
            Once started, use GetAvailableVoice and GetVoice to get the data, and then call StopVoiceRecording 
            when the user has released their push-to-talk hotkey or the game session has completed.
            </summary>
        </member>
        <member name="P:Steamworks.SteamUser.HasVoiceData">
            <summary>
            Returns true if we have voice data waiting to be read
            </summary>
        </member>
        <member name="M:Steamworks.SteamUser.ReadVoiceData(System.IO.Stream)">
            <summary>
            Reads the voice data and returns the number of bytes written.
            The compressed data can be transmitted by your application and decoded back into raw audio data using 
            DecompressVoice on the other side. The compressed data provided is in an arbitrary format and is not meant to be played directly.
            This should be called once per frame, and at worst no more than four times a second to keep the microphone input delay as low as 
            possible. Calling this any less may result in gaps in the returned stream.
            </summary>
        </member>
        <member name="M:Steamworks.SteamUser.DecompressVoice(System.IO.Stream,System.Int32,System.IO.Stream)">
            <summary>
            Decodes the compressed voice data returned by GetVoice.
            The output data is raw single-channel 16-bit PCM audio.The decoder supports any sample rate from 11025 to 48000.
            </summary>
        </member>
        <member name="M:Steamworks.SteamUser.GetAuthSessionTicket">
            <summary>
            Retrieve a authentication ticket to be sent to the entity who wishes to authenticate you.
            </summary>
        </member>
        <member name="P:Steamworks.SteamUser.IsBehindNAT">
            <summary>
            Checks if the current users looks like they are behind a NAT device.
            This is only valid if the user is connected to the Steam servers and may not catch all forms of NAT.
            </summary>
        </member>
        <member name="P:Steamworks.SteamUser.SteamLevel">
            <summary>
            Gets the Steam level of the user, as shown on their Steam community profile.
            </summary>
        </member>
        <member name="M:Steamworks.SteamUser.GetStoreAuthUrlAsync(System.String)">
            <summary>
            Requests a URL which authenticates an in-game browser for store check-out, and then redirects to the specified URL.
            As long as the in-game browser accepts and handles session cookies, Steam microtransaction checkout pages will automatically recognize the user instead of presenting a login page.
            NOTE: The URL has a very short lifetime to prevent history-snooping attacks, so you should only call this API when you are about to launch the browser, or else immediately navigate to the result URL using a hidden browser window.
            NOTE: The resulting authorization cookie has an expiration time of one day, so it would be a good idea to request and visit a new auth URL every 12 hours.
            </summary>
        </member>
        <member name="P:Steamworks.SteamUser.IsPhoneVerified">
            <summary>
            Checks whether the current user has verified their phone number.
            </summary>
        </member>
        <member name="P:Steamworks.SteamUser.IsTwoFactorEnabled">
            <summary>
            Checks whether the current user has Steam Guard two factor authentication enabled on their account.
            </summary>
        </member>
        <member name="P:Steamworks.SteamUser.IsPhoneIdentifying">
            <summary>
            Checks whether the user's phone number is used to uniquely identify them.
            </summary>
        </member>
        <member name="P:Steamworks.SteamUser.IsPhoneRequiringVerification">
            <summary>
            Checks whether the current user's phone number is awaiting (re)verification.
            </summary>
        </member>
        <member name="E:Steamworks.SteamUserStats.OnAchievementIconFetched">
            <summary>
            called when the achivement icon is loaded
            </summary>
        </member>
        <member name="E:Steamworks.SteamUserStats.OnUserStatsReceived">
            <summary>
            called when the latests stats and achievements have been received
            from the server
            </summary>
        </member>
        <member name="E:Steamworks.SteamUserStats.OnUserStatsStored">
            <summary>
            result of a request to store the user stats for a game
            </summary>
        </member>
        <member name="E:Steamworks.SteamUserStats.OnAchievementProgress">
            <summary>
            result of a request to store the achievements for a game, or an 
            "indicate progress" call. If both m_nCurProgress and m_nMaxProgress
            are zero, that means the achievement has been fully unlocked
            </summary>
        </member>
        <member name="E:Steamworks.SteamUserStats.OnUserStatsUnloaded">
            <summary>
            Callback indicating that a user's stats have been unloaded
            </summary>
        </member>
        <member name="P:Steamworks.SteamUserStats.Achievements">
            <summary>
            Get the available achievements
            </summary>
        </member>
        <member name="M:Steamworks.SteamUserStats.PlayerCountAsync">
            <summary>
            Tries to get the number of players currently playing this game.
            Or -1 if failed.
            </summary>
        </member>
        <member name="M:Steamworks.SteamUserStats.StoreStats">
            <summary>
            Send the changed stats and achievements data to the server for permanent storage.
            If this fails then nothing is sent to the server. It's advisable to keep trying until the call is successful.
            This call can be rate limited. Call frequency should be on the order of minutes, rather than seconds.You should only be calling this during major state changes such as the end of a round, the map changing, or the user leaving a server. This call is required to display the achievement unlock notification dialog though, so if you have called SetAchievement then it's advisable to call this soon after that.
            If you have stats or achievements that you have saved locally but haven't uploaded with this function when your application process ends then this function will automatically be called.
            You can find additional debug information written to the %steam_install%\logs\stats_log.txt file.
            This function returns true upon success if :
            RequestCurrentStats has completed and successfully returned its callback AND
            the current game has stats associated with it in the Steamworks Partner backend, and those stats are published.
            </summary>
        </member>
        <member name="M:Steamworks.SteamUserStats.RequestCurrentStats">
            <summary>
            Asynchronously request the user's current stats and achievements from the server.
            You must always call this first to get the initial status of stats and achievements.
            Only after the resulting callback comes back can you start calling the rest of the stats 
            and achievement functions for the current user.
            </summary>
        </member>
        <member name="M:Steamworks.SteamUserStats.FindOrCreateLeaderboard(System.String,Steamworks.Data.LeaderboardSort,Steamworks.Data.LeaderboardDisplay)">
            <summary>
            Gets a leaderboard by name, it will create it if it's not yet created.
            Leaderboards created with this function will not automatically show up in the Steam Community.
            You must manually set the Community Name field in the App Admin panel of the Steamworks website. 
            As such it's generally recommended to prefer creating the leaderboards in the App Admin panel on 
            the Steamworks website and using FindLeaderboard unless you're expected to have a large amount of
            dynamically created leaderboards.
            </summary>
        </member>
        <member name="T:Steamworks.SteamUtils">
            <summary>
            Interface which provides access to a range of miscellaneous utility functions
            </summary>
        </member>
        <member name="E:Steamworks.SteamUtils.OnIpCountryChanged">
            <summary>
            The country of the user changed
            </summary>
        </member>
        <member name="E:Steamworks.SteamUtils.OnLowBatteryPower">
            <summary>
            Fired when running on a laptop and less than 10 minutes of battery is left, fires then every minute
            The parameter is the number of minutes left
            </summary>
        </member>
        <member name="E:Steamworks.SteamUtils.OnSteamShutdown">
            <summary>
            Called when Steam wants to shutdown
            </summary>
        </member>
        <member name="E:Steamworks.SteamUtils.OnGamepadTextInputDismissed">
            <summary>
            Big Picture gamepad text input has been closed. Parameter is true if text was submitted, false if cancelled etc.
            </summary>
        </member>
        <member name="P:Steamworks.SteamUtils.SecondsSinceAppActive">
            <summary>
            Returns the number of seconds since the application was active
            </summary>
        </member>
        <member name="P:Steamworks.SteamUtils.SecondsSinceComputerActive">
            <summary>
            Returns the number of seconds since the user last moved the mouse etc
            </summary>
        </member>
        <member name="P:Steamworks.SteamUtils.SteamServerTime">
            <summary>
            Steam server time.  Number of seconds since January 1, 1970, GMT (i.e unix time)
            </summary>
        </member>
        <member name="P:Steamworks.SteamUtils.IpCountry">
            <summary>
            returns the 2 digit ISO 3166-1-alpha-2 format country code this client is running in (as looked up via an IP-to-location database)
            e.g "US" or "UK".
            </summary>
        </member>
        <member name="M:Steamworks.SteamUtils.GetImageSize(System.Int32,System.UInt32@,System.UInt32@)">
            <summary>
            returns true if the image exists, and the buffer was successfully filled out
            results are returned in RGBA format
            the destination buffer size should be 4 * height * width * sizeof(char)
            </summary>
        </member>
        <member name="M:Steamworks.SteamUtils.GetImage(System.Int32)">
            <summary>
            returns the image in RGBA format
            </summary>
        </member>
        <member name="P:Steamworks.SteamUtils.UsingBatteryPower">
            <summary>
            Returns true if we're using a battery (ie, a laptop not plugged in)
            </summary>
        </member>
        <member name="P:Steamworks.SteamUtils.CurrentBatteryPower">
            <summary>
            Returns battery power [0-1]
            </summary>
        </member>
        <member name="P:Steamworks.SteamUtils.OverlayNotificationPosition">
            <summary>
            Sets the position where the overlay instance for the currently calling game should show notifications.
            This position is per-game and if this function is called from outside of a game context it will do nothing.
            </summary>
        </member>
        <member name="P:Steamworks.SteamUtils.IsOverlayEnabled">
            <summary>
            Returns true if the overlay is running and the user can access it. The overlay process could take a few seconds to
            start and hook the game process, so this function will initially return false while the overlay is loading.
            </summary>
        </member>
        <member name="P:Steamworks.SteamUtils.DoesOverlayNeedPresent">
             <summary>
             Normally this call is unneeded if your game has a constantly running frame loop that calls the 
             D3D Present API, or OGL SwapBuffers API every frame.
            
             However, if you have a game that only refreshes the screen on an event driven basis then that can break 
             the overlay, as it uses your Present/SwapBuffers calls to drive it's internal frame loop and it may also
             need to Present() to the screen any time an even needing a notification happens or when the overlay is
             brought up over the game by a user.  You can use this API to ask the overlay if it currently need a present
             in that case, and then you can check for this periodically (roughly 33hz is desirable) and make sure you
             refresh the screen with Present or SwapBuffers to allow the overlay to do it's work.
             </summary>
        </member>
        <member name="M:Steamworks.SteamUtils.CheckFileSignatureAsync(System.String)">
            <summary>
            Asynchronous call to check if an executable file has been signed using the public key set on the signing tab
            of the partner site, for example to refuse to load modified executable files.  
            </summary>
        </member>
        <member name="M:Steamworks.SteamUtils.ShowGamepadTextInput(Steamworks.GamepadTextInputMode,Steamworks.GamepadTextInputLineMode,System.String,System.Int32,System.String)">
            <summary>
            Activates the Big Picture text input dialog which only supports gamepad input
            </summary>
        </member>
        <member name="M:Steamworks.SteamUtils.GetEnteredGamepadText">
            <summary>
            Returns previously entered text
            </summary>
        </member>
        <member name="P:Steamworks.SteamUtils.SteamUILanguage">
            <summary>
            returns the language the steam client is running in, you probably want 
            Apps.CurrentGameLanguage instead, this is for very special usage cases
            </summary>
        </member>
        <member name="P:Steamworks.SteamUtils.IsSteamRunningInVR">
            <summary>
            returns true if Steam itself is running in VR mode
            </summary>
        </member>
        <member name="M:Steamworks.SteamUtils.SetOverlayNotificationInset(System.Int32,System.Int32)">
            <summary>
            Sets the inset of the overlay notification from the corner specified by SetOverlayNotificationPosition
            </summary>
        </member>
        <member name="P:Steamworks.SteamUtils.IsSteamInBigPictureMode">
            <summary>
            returns true if Steam and the Steam Overlay are running in Big Picture mode
            Games much be launched through the Steam client to enable the Big Picture overlay. During development,
            a game can be added as a non-steam game to the developers library to test this feature
            </summary>
        </member>
        <member name="M:Steamworks.SteamUtils.StartVRDashboard">
            <summary>
            ask SteamUI to create and render its OpenVR dashboard
            </summary>
        </member>
        <member name="P:Steamworks.SteamUtils.VrHeadsetStreaming">
            <summary>
            Set whether the HMD content will be streamed via Steam In-Home Streaming
            If this is set to true, then the scene in the HMD headset will be streamed, and remote input will not be allowed.
            If this is set to false, then the application window will be streamed instead, and remote input will be allowed.
            The default is true unless "VRHeadsetStreaming" "0" is in the extended appinfo for a game.
            (this is useful for games that have asymmetric multiplayer gameplay)
            </summary>
        </member>
        <member name="T:Steamworks.SteamVideo">
            <summary>
            Undocumented Parental Settings
            </summary>
        </member>
        <member name="P:Steamworks.SteamVideo.IsBroadcasting">
            <summary>
            Return true if currently using Steam's live broadcasting
            </summary>
        </member>
        <member name="P:Steamworks.SteamVideo.NumViewers">
            <summary>
            If we're broadcasting, will return the number of live viewers
            </summary>
        </member>
        <member name="P:Steamworks.Friend.IsMe">
            <summary>
            Returns true if this is the local user
            </summary>
        </member>
        <member name="P:Steamworks.Friend.IsFriend">
            <summary>
            Return true if this is a friend
            </summary>
        </member>
        <member name="P:Steamworks.Friend.IsBlocked">
            <summary>
            Returns true if you have this user blocked
            </summary>
        </member>
        <member name="P:Steamworks.Friend.IsPlayingThisGame">
            <summary>
            Return true if this user is playing the game we're running
            </summary>
        </member>
        <member name="P:Steamworks.Friend.IsOnline">
            <summary>
            Returns true if this friend is online
            </summary>
        </member>
        <member name="M:Steamworks.Friend.RequestInfoAsync(System.Int32)">
            <summary>
            Sometimes we don't know the user's name. This will wait until we have
            downloaded the information on this user.
            </summary>
        </member>
        <member name="P:Steamworks.Friend.IsAway">
            <summary>
            Returns true if this friend is marked as away
            </summary>
        </member>
        <member name="P:Steamworks.Friend.IsBusy">
            <summary>
            Returns true if this friend is marked as busy
            </summary>
        </member>
        <member name="P:Steamworks.Friend.IsSnoozing">
            <summary>
            Returns true if this friend is marked as snoozing
            </summary>
        </member>
        <member name="M:Steamworks.Friend.InviteToGame(System.String)">
            <summary>
            Invite this friend to the game that we are playing
            </summary>
        </member>
        <member name="M:Steamworks.Friend.SendMessage(System.String)">
            <summary>
            Sends a message to a Steam friend. Returns true if success
            </summary>
        </member>
        <member name="P:Steamworks.InventoryDef.Name">
            <summary>
            Shortcut to call GetProperty( "name" )
            </summary>
        </member>
        <member name="P:Steamworks.InventoryDef.Description">
            <summary>
            Shortcut to call GetProperty( "description" )
            </summary>
        </member>
        <member name="P:Steamworks.InventoryDef.IconUrl">
            <summary>
            Shortcut to call GetProperty( "icon_url" )
            </summary>
        </member>
        <member name="P:Steamworks.InventoryDef.IconUrlLarge">
            <summary>
            Shortcut to call GetProperty( "icon_url_large" )
            </summary>
        </member>
        <member name="P:Steamworks.InventoryDef.PriceCategory">
            <summary>
            Shortcut to call GetProperty( "price_category" )
            </summary>
        </member>
        <member name="P:Steamworks.InventoryDef.Type">
            <summary>
            Shortcut to call GetProperty( "type" )
            </summary>
        </member>
        <member name="P:Steamworks.InventoryDef.Exchange">
            <summary>
            Shortcut to call GetProperty( "exchange" )
            </summary>
        </member>
        <member name="P:Steamworks.InventoryDef.Marketable">
            <summary>
            Shortcut to call GetBoolProperty( "marketable" )
            </summary>
        </member>
        <member name="P:Steamworks.InventoryDef.Tradable">
            <summary>
            Shortcut to call GetBoolProperty( "tradable" )
            </summary>
        </member>
        <member name="P:Steamworks.InventoryDef.Created">
            <summary>
            Gets the property timestamp
            </summary>
        </member>
        <member name="P:Steamworks.InventoryDef.Modified">
            <summary>
            Gets the property modified
            </summary>
        </member>
        <member name="M:Steamworks.InventoryDef.GetProperty(System.String)">
            <summary>
            Get a specific property by name
            </summary>
        </member>
        <member name="M:Steamworks.InventoryDef.GetBoolProperty(System.String)">
            <summary>
            Read a raw property from the definition schema
            </summary>
        </member>
        <member name="M:Steamworks.InventoryDef.GetProperty``1(System.String)">
            <summary>
            Read a raw property from the definition schema
            </summary>
        </member>
        <member name="P:Steamworks.InventoryDef.Properties">
            <summary>
            Gets a list of all properties on this item
            </summary>
        </member>
        <member name="P:Steamworks.InventoryDef.LocalPrice">
            <summary>
            Returns the price of this item in the local currency (SteamInventory.Currency)
            </summary>
        </member>
        <member name="P:Steamworks.InventoryDef.LocalBasePrice">
            <summary>
            If the price has been discounted, LocalPrice will differ from LocalBasePrice
            (assumed, this isn't documented)
            </summary>
        </member>
        <member name="P:Steamworks.InventoryItem.Properties">
            <summary>
            Only available if the result set was created with the getproperties
            </summary>
        </member>
        <member name="P:Steamworks.InventoryItem.IsNoTrade">
            <summary>
            This item is account-locked and cannot be traded or given away. 
            This is an item status flag which is permanently attached to specific item instances
            </summary>
        </member>
        <member name="P:Steamworks.InventoryItem.IsRemoved">
            <summary>
            The item has been destroyed, traded away, expired, or otherwise invalidated. 
            This is an action confirmation flag which is only set one time, as part of a result set.
            </summary>
        </member>
        <member name="P:Steamworks.InventoryItem.IsConsumed">
            <summary>
            The item quantity has been decreased by 1 via ConsumeItem API. 
            This is an action confirmation flag which is only set one time, as part of a result set.
            </summary>
        </member>
        <member name="M:Steamworks.InventoryItem.Consume(System.Int32)">
            <summary>
            Consumes items from a user's inventory. If the quantity of the given item goes to zero, it is permanently removed.
            Once an item is removed it cannot be recovered.This is not for the faint of heart - if your game implements item removal at all, 
            a high-friction UI confirmation process is highly recommended.ConsumeItem can be restricted to certain item definitions or fully
            blocked via the Steamworks website to minimize support/abuse issues such as the classic "my brother borrowed my laptop and deleted all of my rare items".
            </summary>
        </member>
        <member name="M:Steamworks.InventoryItem.SplitStack(System.Int32)">
            <summary>
            Split stack into two items
            </summary>
        </member>
        <member name="M:Steamworks.InventoryItem.TransferItemQuantity(Steamworks.InventoryItem,System.Int32)">
            <summary>
            Transfer x quantity from this item to the target item
            </summary>
        </member>
        <member name="M:Steamworks.InventoryResult.Serialize">
            <summary>
            Serialized result sets contain a short signature which can't be forged or replayed across different game sessions.
            A result set can be serialized on the local client, transmitted to other players via your game networking, and 
            deserialized by the remote players.This is a secure way of preventing hackers from lying about posessing 
            rare/high-value items. Serializes a result set with signature bytes to an output buffer.The size of a serialized 
            result depends on the number items which are being serialized.When securely transmitting items to other players, 
            it is recommended to use GetItemsByID first to create a minimal result set.
            Results have a built-in timestamp which will be considered "expired" after an hour has elapsed.See DeserializeResult
            for expiration handling.
            </summary>
        </member>
        <member name="T:Steamworks.SteamServerInit">
            <summary>
            Used to set up the server. 
            The variables in here are all required to be set, and can't be changed once the server is created.
            </summary>
        </member>
        <member name="F:Steamworks.SteamServerInit.VersionString">
            <summary>
            The version string is usually in the form x.x.x.x, and is used by the master server to detect when the server is out of date.
            If you go into the dedicated server tab on steamworks you'll be able to server the latest version. If this version number is
            less than that latest version then your server won't show.
            </summary>
        </member>
        <member name="F:Steamworks.SteamServerInit.ModDir">
            <summary>
            This should be the same directory game where gets installed into. Just the folder name, not the whole path. I.e. "Rust", "Garrysmod".
            </summary>
        </member>
        <member name="F:Steamworks.SteamServerInit.GameDescription">
            <summary>
            The game description. Setting this to the full name of your game is recommended.
            </summary>
        </member>
        <member name="M:Steamworks.SteamServerInit.WithRandomSteamPort">
            <summary>
            Set the Steam quert port 
            </summary>
        </member>
        <member name="M:Steamworks.SteamServerInit.WithQueryShareGamePort">
            <summary>
            If you pass MASTERSERVERUPDATERPORT_USEGAMESOCKETSHARE into usQueryPort, then it causes the game server API to use 
            "GameSocketShare" mode, which means that the game is responsible for sending and receiving UDP packets for the master
            server updater.
            
            More info about this here: https://partner.steamgames.com/doc/api/ISteamGameServer#HandleIncomingPacket
            </summary>
        </member>
        <member name="P:Steamworks.Ugc.Editor.NewCommunityFile">
            <summary>
            Create a Normal Workshop item that can be subscribed to
            </summary>
        </member>
        <member name="P:Steamworks.Ugc.Editor.NewMicrotransactionFile">
            <summary>
            Workshop item that is meant to be voted on for the purpose of selling in-game
            </summary>
        </member>
        <member name="F:Steamworks.Ugc.PublishResult.NeedsWorkshopAgreement">
            <summary>
            https://partner.steamgames.com/doc/features/workshop/implementation#Legal
            </summary>
        </member>
        <member name="M:Steamworks.Ugc.Item.HasTag(System.String)">
            <summary>
            A case insensitive check for tag
            </summary>
        </member>
        <member name="M:Steamworks.Ugc.Query.MatchAnyTag">
            <summary>
            Found items must have at least one of the defined tags
            </summary>
        </member>
        <member name="M:Steamworks.Ugc.Query.MatchAllTags">
            <summary>
            Found items must have all defined tags
            </summary>
        </member>
        <member name="M:Steamworks.Ugc.UserQuery.MatchAnyTag">
            <summary>
            Found items must have at least one of the defined tags
            </summary>
        </member>
        <member name="M:Steamworks.Ugc.UserQuery.MatchAllTags">
            <summary>
            Found items must have all defined tags
            </summary>
        </member>
        <member name="P:Steamworks.Epoch.Current">
            <summary>
            Returns the current Unix Epoch
            </summary>
        </member>
        <member name="M:Steamworks.Epoch.ToDateTime(System.Decimal)">
            <summary>
            Convert an epoch to a datetime
            </summary>
        </member>
        <member name="M:Steamworks.Epoch.FromDateTime(System.DateTime)">
            <summary>
            Convert a DateTime to a unix time
            </summary>
        </member>
        <member name="M:Steamworks.Helpers.TakeStringBuilder">
            <summary>
            Returns a StringBuilder. This will get returned and reused later on.
            </summary>
        </member>
        <member name="M:Steamworks.Helpers.TakeBuffer(System.Int32)">
            <summary>
            Returns a StringBuilder. This will get returned and reused later on.
            </summary>
        </member>
    </members>
</doc>
